// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Cycle {
  CS
  CB
}

enum Turn {
  AFTERNOON
  MORNING
}

enum MessageState {
  ACTIVE
  DELETED
  UPDATED
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Course {
  id       Int   @id @unique @default(autoincrement())
  course   Int
  division Int
  cycle    Cycle

  students   UserCourse[]
  classrooms Classroom[]
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  rol           Role
  dni           String?
  turn          Turn?
  tutor_name    String?
  tutor_dni     String?
  tutor_phone   String?
  address       String?
  phone         String
  gender        Gender
  birthday      DateTime?
  active        Boolean   @default(false)

  courses              UserCourse[]
  accounts             Account[]
  classroomsMember     ClassroomMember[]
  classroomsOwner      Classroom[]
  classroomMessages    ClassroomMessage[]
  classroomAttachments ClassroomAttachment[]
  notifications        Notification[]

  @@map("users")
}

model UserCourse {
  studentId String
  courseId  Int

  user   User   @relation(fields: [studentId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@id([studentId, courseId])
}

model Classroom {
  id             String  @id @default(uuid())
  name           String
  ownerId        String
  classroomCode  String  @unique
  courseId       Int
  classroomColor String?
  description    String?

  owner  User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  members       ClassroomMember[]
  messages      ClassroomMessage[]
  notifications Notification[]
}

model ClassroomMember {
  userId      String
  classroomId String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classroom Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, classroomId])
}

model ClassroomMessage {
  id          String       @id @default(uuid())
  ownerId     String
  classroomId String
  body        String
  created_at  DateTime     @default(now())
  status      MessageState

  owner     User      @relation(fields: [ownerId], references: [id], onUpdate: Cascade)
  classroom Classroom @relation(fields: [classroomId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  attachmets ClassroomAttachment[]
}

model ClassroomAttachment {
  id        String @id @default(uuid())
  messageId String
  ownerId   String
  name      String
  url       String

  message ClassroomMessage @relation(fields: [messageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  owner   User             @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  body       String
  created_at DateTime @default(now())

  classroomId String?

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classroom Classroom? @relation(fields: [classroomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  description String
  filename    String
  createdAt   DateTime @default(now())
}